import { Tool, ToolInputSpecField } from "../tool.interface";

export class TextSentimentTool implements Tool {
  name = "text_sentiment";

  description =
    "–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º, –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–º. " +
    "–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏. " +
    "–ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "text",
      type: "string",
      required: true,
      description: "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–∑—ã–≤, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."
    }
  ];

  private positiveWords = ["–æ—Ç–ª–∏—á–Ω–æ", "—Ö–æ—Ä–æ—à–æ", "—Å—É–ø–µ—Ä", "–∫—Ä—É—Ç–æ", "—Å—á–∞—Å—Ç–ª–∏–≤", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ"];
  private negativeWords = ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–≥—Ä—É—Å—Ç—å", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω", "–ø–µ—á–∞–ª—å–Ω–æ"];

  async run(input: { text: string }): Promise<string> {
    const text = input.text.toLowerCase();

    const positives = this.positiveWords.filter(w => text.includes(w)).length;
    const negatives = this.negativeWords.filter(w => text.includes(w)).length;

    if (positives > negatives) return "üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç";
    if (negatives > positives) return "‚òπÔ∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç";
    return "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç";
  }
}