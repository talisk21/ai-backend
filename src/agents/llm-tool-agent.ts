import { Agent, AgentInput, AgentOutput, ChatMessage } from "./agent.interface";
import { ToolExecutorService } from "../tools/tool-executor.service";
import { OpenRouterService } from "./openrouter.service";
import { PromptLoader } from "./prompt-loader";
import { ToolCallService } from "../tools/tool-call.service";
import { LogService } from "../log/log.service";
import { ToolResponseParserService } from "../tools/tool-response-parser.service";
import { Logger } from "@nestjs/common";

export class LlmToolAgent implements Agent {
  name = "llm-tool-agent";
  description =
    "–ê–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å–∞–º.";

  private readonly logger = new Logger(LlmToolAgent.name);

  constructor(
    private openRouter: OpenRouterService,
    private tools: ToolExecutorService,
    private log: LogService,
    private promptLoader: PromptLoader,
    private toolCallService: ToolCallService,
    private toolResponseParser: ToolResponseParserService
  ) {
  }

  async run(input: AgentInput): Promise<AgentOutput> {
    const systemPrompt = this.promptLoader.loadAgentPrompt(
      "llm-tool-agent.prompt.txt"
    );

    const messages: ChatMessage[] = [
      {
        role: "system",
        content: systemPrompt
      },
      ...input.messages.map((m) => ({
        role: m.role,
        content: m.content,
        file: m.file // —Ç–∏–ø file —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      }))
    ];

    // üëá –ü—Ä–∏–∫—Ä–µ–ø–∏–º base64-—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (input.files?.length) {
      this.logger.log(
        `üìé –ü–µ—Ä–µ–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${input.files.length}`,
        "LlmToolAgent"
      );

      for (const file of input.files) {
        messages.push({
          role: "user",
          content: `–§–∞–π–ª: ${file.name}`,
          file: {
            name: file.name,
            mimeType: file.mimeType,
            base64: file.base64
          }
        });
      }
    }

    const response = await this.openRouter.chat({
      model: input.model,
      messages,
      useTools: true
    });

    this.logger.log(`üîÑ –û—Ç–≤–µ—Ç –æ—Ç LLM:\n${JSON.stringify(response, null, 2)}`);
    await this.log.info(
      `üîÑ –û—Ç–≤–µ—Ç –æ—Ç LLM:\n${JSON.stringify(response, null, 2)}`,
      "LlmToolAgent"
    );

    const parsed = this.toolResponseParser.parse(response);

    // ‚õî –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (parsed.error !== null) {
      const msg = `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tool-–≤—ã–∑–æ–≤–∞: ${parsed.error}`;
      this.logger.warn(msg);
      await this.log.warn?.(msg, "LlmToolAgent");
      return { result: msg };
    }

    // ‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (parsed.tool === null) {
      const msg =
        "‚ùå –≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –¢–æ–ª—å–∫–æ tool-–≤—ã–∑–æ–≤—ã.";
      this.logger.warn(msg);
      await this.log.warn?.(msg, "LlmToolAgent");
      return { result: msg };
    }

    // ‚úÖ –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const output = await this.toolCallService.executeTool(
      parsed.tool,
      parsed.input
    );
    if (typeof output !== "string") {
      const errMsg =
        output?.error ?? "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞.";
      this.logger.error(errMsg);
      await this.log.error?.(errMsg, "LlmToolAgent");
      return { result: errMsg };
    }

    return {
      result: output,
      usedTools: [
        {
          name: parsed.tool,
          input: parsed.input,
          output
        }
      ]
    };
  }
}
