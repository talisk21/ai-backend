import { Tool, ToolInputSpecField } from "../tool.interface";
import { removeStopwords } from "stopword";

export class ExtractKeywordsTool implements Tool {
  name = "extract_keywords";

  description =
    "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞. " +
    "–£–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–µ—á–∏, –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø-N –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. " +
    "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏, –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "text",
      type: "string",
      required: true,
      description: "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."
    },
    {
      name: "top",
      type: "number",
      required: false,
      description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)."
    }
  ];

  async run(input: { text: string; top?: number }): Promise<string> {
    const { text, top = 10 } = input;

    if (!text || typeof text !== "string") {
      return "‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç";
    }

    const words = text
      .toLowerCase()
      .replace(/[^a-z–∞-—è—ë0-9\s]/gi, "")
      .split(/\s+/)
      .filter(w => w.length > 2);

    const filtered = removeStopwords(words);

    const freq: Record<string, number> = {};
    for (const word of filtered) {
      freq[word] = (freq[word] || 0) + 1;
    }

    const keywords = Object.entries(freq)
      .sort((a, b) => b[1] - a[1])
      .slice(0, top)
      .map(([word]) => word);

    return keywords.length
      ? `üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywords.join(", ")}`
      : "üì≠ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
  }
}