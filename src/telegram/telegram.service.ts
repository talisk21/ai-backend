import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as Services from '@services';
import * as Utils from '@utils';
import * as crypto from 'crypto';
import fetch from 'node-fetch';
import { ChatMessage } from '../agents/agent.interface';

const TelegramBot = require('node-telegram-bot-api');

function sleep(ms: number) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

@Injectable()
export class TelegramService {
  private readonly context = TelegramService.name;
  private readonly logger = new Logger(this.context);
  private bot: InstanceType<typeof TelegramBot>;

  constructor(
    private readonly config: ConfigService,
    private readonly prisma: Services.PrismaService,
    private readonly agentGateway: Services.AgentGatewayService,
    private readonly minio: Services.MinioService,
    private readonly log: Services.LogService,
  ) {
    const token = this.config.get<string>('TELEGRAM_TOKEN');
    if (!token) throw new Error('‚ùå TELEGRAM_TOKEN not set');

    this.bot = new TelegramBot(token, { polling: true });
    this.bot.on('message', (msg) => this.onMessage(msg));

    const startMsg = '‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω';
    this.logger.log(startMsg, this.context);
    void this.log.info(startMsg, this.context);
  }

  private async onMessage(msg: typeof TelegramBot.Message) {
    const chatId = msg.chat.id;
    const text = msg.text?.trim();
    const userId = `tg:${chatId}`;

    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º Execution
    const execMsg = `–ò—â–µ–º/—Å–æ–∑–¥–∞—ë–º execution –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`;
    this.logger.log(execMsg, this.context);
    void this.log.info(execMsg, this.context, { userId });

    const execution = await this.getOrCreateExecution(userId);
    if (!execution) {
      const errExec = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é';
      this.logger.error(errExec, '', this.context);
      void this.log.error(errExec, this.context);
      await this.bot.sendMessage(chatId, errExec);
      return;
    }

    // 2Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    if (msg.document || (msg.photo && msg.photo.length)) {
      return this.handleFileUpload(
        chatId,
        userId,
        execution.id,
        msg.document
          ? msg.document.file_id
          : msg.photo![msg.photo!.length - 1].file_id,
        msg.document ? msg.document.file_name! : `photo.jpg`,
        msg.document ? msg.document.mime_type! : 'image/jpeg',
        msg.caption,
      );
    }

    // 3Ô∏è‚É£ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    if (!text) return;

    const recvMsg = `üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: "${text}"`;
    this.logger.log(recvMsg, this.context);
    void this.log.info(recvMsg, this.context, { userId, text });

    // 4Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º Step
    const step = await this.prisma.step.create({
      data: {
        type: 'agent',
        input: { question: text, model: 'openai/gpt-4o' },
        source: 'telegram',
        userId,
        execution: { connect: { id: execution.id } },
      },
    });
    const createStepMsg = `üíæ –°–æ–∑–¥–∞–Ω step.id=${step.id}`;
    this.logger.log(createStepMsg, this.context);
    void this.log.info(createStepMsg, this.context, { stepId: step.id });

    try {
      // 5Ô∏è‚É£ –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
      const history = await this.prisma.step.findMany({
        where: { executionId: execution.id },
        orderBy: { createdAt: 'asc' },
      });
      const messages: ChatMessage[] = [];
      for (const s of history) {
        const inp: any = s.input;
        const outp: any = s.output;
        if (s.type === 'agent' && inp.question) {
          messages.push({ role: 'user', content: inp.question });
        }
        if (outp?.result) {
          messages.push({ role: 'assistant', content: outp.result });
        }
      }
      messages.push({ role: 'user', content: text });

      // 6Ô∏è‚É£ –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏
      await sleep(2000);
      await this.bot.sendChatAction(chatId, 'typing');

      // 7Ô∏è‚É£ –í—ã–∑–æ–≤ –∞–≥–µ–Ω—Ç–∞
      const agentCallMsg = `ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∞–≥–µ–Ω—Ç—É llm-tool-decision-agent`;
      this.logger.log(agentCallMsg, this.context);
      void this.log.info(agentCallMsg, this.context, { stepId: step.id });

      const result: string = await this.agentGateway.chat(
        { model: 'openai/gpt-4o', messages },
        'llm-tool-decision-agent',
      );

      // 8Ô∏è‚É£ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      const delay = Math.min(result.length * 25, 5000);
      await sleep(delay);

      // 9Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.bot.sendMessage(chatId, result || '‚ÑπÔ∏è –û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      const sentMsg = `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: "${result}"`;
      this.logger.log(sentMsg, this.context);
      void this.log.info(sentMsg, this.context, { stepId: step.id });

      // üîü –û–±–Ω–æ–≤–ª—è–µ–º Step –≤ –ë–î
      await this.prisma.step.update({
        where: { id: step.id },
        data: { output: { result } },
      });
      const saveMsg = `üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è step.id=${step.id}`;
      this.logger.log(saveMsg, this.context);
      void this.log.info(saveMsg, this.context, { stepId: step.id });
    } catch (err: any) {
      const errMsg = `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: ${err.message}`;
      this.logger.error(errMsg, err.stack, this.context);
      void this.log.error(errMsg, this.context, {
        stepId: step.id,
        error: err.stack,
      });
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞');

      await this.prisma.step.update({
        where: { id: step.id },
        data: { error: err.message },
      });
    }
  }

  private async handleFileUpload(
    chatId: number,
    userId: string,
    executionId: string,
    fileId: string,
    filename: string,
    mimeType: string,
    caption?: string,
  ) {
    // 1Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º Step –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const step = await this.prisma.step.create({
      data: {
        type: 'upload',
        input: { fileId, filename, mimeType },
        source: 'telegram',
        userId,
        execution: { connect: { id: executionId } },
      },
    });
    const createMsg = `üíæ Step.upload —Å–æ–∑–¥–∞–Ω (id=${step.id})`;
    this.logger.log(createMsg, this.context);
    void this.log.info(createMsg, this.context, { stepId: step.id });

    try {
      // 2Ô∏è‚É£ –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const link = await this.bot.getFileLink(fileId);
      const res = await fetch(link);
      const buffer = Buffer.from(await res.arrayBuffer());
      const dlMsg = `‚¨áÔ∏è –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å (${buffer.length} –±–∞–π—Ç)`;
      this.logger.log(dlMsg, this.context);
      void this.log.info(dlMsg, this.context, {
        stepId: step.id,
        size: buffer.length,
      });

      // 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ Minio
      const origKey = await this.minio.uploadFileFromBuffer(buffer, filename);
      const origUrl = this.minio.getPublicUrl(origKey);
      await this.prisma.file.create({
        data: {
          id: crypto.randomUUID(),
          name: filename,
          url: origUrl,
          size: buffer.length,
          mimeType,
          stepId: step.id,
          executionId,
          isConverted: false,
        },
      });
      const saveOrigMsg = `üíæ –û—Ä–∏–≥–∏–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${origUrl}`;
      this.logger.log(saveOrigMsg, this.context);
      void this.log.info(saveOrigMsg, this.context, { stepId: step.id });

      // 4Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏–º (–µ—Å–ª–∏ –Ω–∞–¥–æ)
      const converted: Utils.ConvertedFile | null = await Utils.convertFile(
        buffer,
        filename,
      );
      let finalBuffer = buffer,
        finalName = filename,
        finalMime = mimeType,
        finalUrl = origUrl;

      if (converted) {
        const convKey = await this.minio.uploadFileFromBuffer(
          converted.buffer,
          converted.name,
        );
        finalUrl = this.minio.getPublicUrl(convKey);
        await this.prisma.file.create({
          data: {
            id: crypto.randomUUID(),
            name: converted.name,
            url: finalUrl,
            size: converted.buffer.length,
            mimeType: converted.mimeType,
            stepId: step.id,
            executionId,
            isConverted: true,
          },
        });
        finalBuffer = converted.buffer;
        finalName = converted.name;
        finalMime = converted.mimeType;
        const convMsg = `üîÑ –§–∞–π–ª –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${finalUrl}`;
        this.logger.log(convMsg, this.context);
        void this.log.info(convMsg, this.context, { stepId: step.id });
      }

      // 5Ô∏è‚É£ –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.bot.sendMessage(chatId, `üìé –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${finalUrl}`);

      // 6Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–≥–µ–Ω—Ç
      const msgForAgent: ChatMessage = {
        role: 'user',
        content: caption || '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª',
        file: {
          name: finalName,
          mimeType: finalMime,
          base64: finalBuffer.toString('base64'),
        },
      };
      const filesMsg = `üìé –ü–µ—Ä–µ–¥–∞—ë–º —Ñ–∞–π–ª –∞–≥–µ–Ω—Ç–∞ (${finalName})`;
      this.logger.log(filesMsg, this.context);
      void this.log.info(filesMsg, this.context, {
        stepId: step.id,
        file: finalName,
      });

      const result = await this.agentGateway.chat(
        { model: 'openai/gpt-4o', messages: [msgForAgent] },
        'llm-tool-decision-agent',
      );
      await this.bot.sendMessage(chatId, `ü§ñ –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:\n${result}`);
      const agentMsg = `‚úÖ –ê–≥–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –ø–æ —Ñ–∞–π–ª—É: ${result}`;
      this.logger.log(agentMsg, this.context);
      void this.log.info(agentMsg, this.context, { stepId: step.id });

      // 7Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ DB
      await this.prisma.step.update({
        where: { id: step.id },
        data: { output: { result } },
      });
      const saveOutMsg = `üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –¥–ª—è step.id=${step.id}`;
      this.logger.log(saveOutMsg, this.context);
      void this.log.info(saveOutMsg, this.context, { stepId: step.id });
    } catch (err: any) {
      const errMsg = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${err.message}`;
      this.logger.error(errMsg, err.stack, this.context);
      void this.log.error(errMsg, this.context, {
        stepId: step.id,
        error: err.stack,
      });
      await this.bot.sendMessage(
        chatId,
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª',
      );
      await this.prisma.step.update({
        where: { id: step.id },
        data: { error: err.message },
      });
    }
  }

  private async getOrCreateExecution(userId: string) {
    const recent = await this.prisma.execution.findFirst({
      where: { userId },
      orderBy: { startedAt: 'desc' },
    });

    if (
      recent &&
      !recent.finishedAt &&
      Date.now() - new Date(recent.startedAt).getTime() < 5 * 60 * 1000
    ) {
      return recent;
    }
    if (recent && !recent.finishedAt) {
      await this.prisma.execution.update({
        where: { id: recent.id },
        data: { finishedAt: new Date(), status: 'done' },
      });
    }
    return this.prisma.execution.create({ data: { userId, status: 'active' } });
  }
}
