import { Tool } from '../tool.interface';

export class TextSentimentTool implements Tool {
  name = 'text_sentiment';
  description = '–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ (–ø–æ–∑–∏—Ç–∏–≤, –Ω–µ–≥–∞—Ç–∏–≤, –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ)';

  private positiveWords = ['–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '—Å—É–ø–µ—Ä', '–∫—Ä—É—Ç–æ', '—Å—á–∞—Å—Ç–ª–∏–≤', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ'];
  private negativeWords = ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–≥—Ä—É—Å—Ç—å', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø–µ—á–∞–ª—å–Ω–æ'];

  async run(input: { text: string }): Promise<string> {
    const text = input.text.toLowerCase();

    const positives = this.positiveWords.filter(w => text.includes(w)).length;
    const negatives = this.negativeWords.filter(w => text.includes(w)).length;

    if (positives > negatives) return 'üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç';
    if (negatives > positives) return '‚òπÔ∏è –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç';
    return 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç';
  }
}