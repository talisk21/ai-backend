import { Tool, ToolInputSpecField } from "../tool.interface";
import * as fs from "fs";
import * as path from "path";
import { Buffer } from "buffer";

export class FileReadTool implements Tool {
  name = "file_read";
  description = "–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏ –∏–ª–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ base64. –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "path",
      type: "string",
      required: false,
      description: "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ. –ú–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∏–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"./data/info.txt\")."
    },
    {
      name: "base64",
      type: "string",
      required: false,
      description: "Base64-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏."
    },
    {
      name: "asBase64",
      type: "boolean",
      required: false,
      description: "–ï—Å–ª–∏ true ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64. –ï—Å–ª–∏ false ‚Äî –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
    }
  ];

  async run(input: { path?: string; base64?: string; asBase64?: boolean }): Promise<string> {
    const { path: filePath, base64, asBase64 } = input;

    let buffer: Buffer;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    if (filePath) {
      const resolvedPath = path.resolve(filePath);

      try {
        buffer = fs.readFileSync(resolvedPath);
      } catch (error: any) {
        return `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ –ø—É—Ç–∏: ${error.message}`;
      }
    } else if (base64) {
      try {
        buffer = Buffer.from(base64, "base64");
      } catch (error: any) {
        return `‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è base64-—Å—Ç—Ä–æ–∫–∞: ${error.message}`;
      }
    } else {
      return "‚ùå –£–∫–∞–∂–∏ –ª–∏–±–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (path), –ª–∏–±–æ base64-—Å—Ç—Ä–æ–∫—É (base64)";
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (asBase64) {
      return buffer.toString("base64");
    }

    const text = buffer.toString("utf-8");
    return text.slice(0, 2000) || "üì≠ –§–∞–π–ª –ø—É—Å—Ç";
  }
}