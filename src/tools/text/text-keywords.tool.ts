import { Tool } from '../tool.interface';

export class TextKeywordsTool implements Tool {
  name = 'text_keywords';
  description = '–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Å—Ç–æ–ø-—Å–ª–æ–≤, —á–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑)';

  private stopWords = new Set([
    '–∏', '–≤', '–≤–æ', '–Ω–∞', '—Å', '—Å–æ', '–∑–∞', '–ø–æ–¥', '–ø–æ', '–æ', '–æ–±', '–æ—Ç',
    '–∞', '–Ω–æ', '–∏–ª–∏', '–¥–∞', '—á—Ç–æ', '—ç—Ç–æ', '–∫–∞–∫', '—É', '–∫', '–∏–∑', '–¥–ª—è',
    '–Ω–µ', '–º—ã', '–≤—ã', '–æ–Ω', '–æ–Ω–∞', '–æ–Ω–∏', '–µ–≥–æ', '–µ–µ', '–∏—Ö', '–±—ã', '–∂–µ', '–±—ã—Ç—å'
  ]);

  async run(input: { text: string }): Promise<string> {
    const words = input.text
      .toLowerCase()
      .replace(/[.,!?;:()\[\]{}"']/g, '')
      .split(/\s+/)
      .filter(word => word.length > 2 && !this.stopWords.has(word));

    const frequencyMap: Record<string, number> = {};
    for (const word of words) {
      frequencyMap[word] = (frequencyMap[word] || 0) + 1;
    }

    const topWords = Object.entries(frequencyMap)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([word, count]) => `${word} (${count})`)
      .join(', ');

    return `üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${topWords}`;
  }
}