import { Tool, ToolInputSpecField } from "../tool.interface";

export class TextLengthTool implements Tool {
  name = "text_length";

  description =
    "–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–ª–æ–≤. " +
    "–ü–æ–ª–µ–∑–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—ë–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–≤–æ–¥–∞, –æ—Ü–µ–Ω–∫–∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞. " +
    "–£—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–±–µ–ª—ã.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "text",
      type: "string",
      required: true,
      description: "–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—Ç–∞—Ç—å—è."
    }
  ];

  async run(input: { text: string }): Promise<string> {
    const { text } = input;

    if (!text || typeof text !== "string") {
      return "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç";
    }

    const charCount = text.length;
    const wordCount = text.trim().split(/\s+/).length;

    return `üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${charCount} —Å–∏–º–≤–æ–ª–æ–≤, ${wordCount} —Å–ª–æ–≤`;
  }
}