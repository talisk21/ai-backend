import { Tool, ToolInputSpecField } from "../tool.interface";

export class JsonExtractTool implements Tool {
  name = "json_extract";

  description =
    "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞ –ø–æ –∫–ª—é—á—É –∏–ª–∏ –ø—É—Ç–∏ —Å —Ç–æ—á–µ—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: user.name –∏–ª–∏ order.items.0.id).";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "json",
      type: "object",
      required: true,
      description: "JSON-–æ–±—ä–µ–∫—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ."
    },
    {
      name: "path",
      type: "string",
      required: true,
      description: "–ü—É—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: user.name –∏–ª–∏ order.items.0.name"
    }
  ];

  async run(input: { json: object; path: string }): Promise<string> {
    const { json, path } = input;

    if (!json || typeof path !== "string") {
      return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥";
    }

    const keys = path.split(".");
    let result: any = json;

    for (const key of keys) {
      if (result && typeof result === "object" && key in result) {
        result = result[key];
      } else {
        return `‚ùå –ö–ª—é—á '${key}' –Ω–µ –Ω–∞–π–¥–µ–Ω`;
      }
    }

    return `üì§ –ó–Ω–∞—á–µ–Ω–∏–µ: ${JSON.stringify(result)}`;
  }
}