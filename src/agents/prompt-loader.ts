import { Injectable } from "@nestjs/common";
import { readFileSync } from "fs";
import { join } from "path";
import { ToolExecutorService } from "../tools/tool-executor.service"; // –ø—É—Ç—å –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç
import { ToolInputSpecField } from "../tools/tool.interface";

@Injectable()
export class PromptLoader {
  private readonly cache = new Map<string, string>();

  constructor(private readonly toolExecutor: ToolExecutorService) {
  }

  loadPrompt(filename: string): string {
    if (this.cache.has(filename)) return this.cache.get(filename)!;

    const path = join(process.cwd(), "src", "agents", "prompts", filename);
    const content = readFileSync(path, "utf-8");
    this.cache.set(filename, content);
    return content;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º—Ç –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–∞ {KEY}
   */
  loadPromptWithParams(filename: string, params: Record<string, string>): string {
    let prompt = this.loadPrompt(filename);
    for (const [key, value] of Object.entries(params)) {
      prompt = prompt.replace(new RegExp(`{${key}}`, "g"), value);
    }
    return prompt;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—è {TOOLS} –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
   */
  loadAgentPrompt(filename: string): string {
    const content = this.loadPrompt(filename);

    // –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {TOOLS} ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    if (content.includes("{TOOLS}")) {
      const tools = this.toolExecutor.getToolList();
      const toolsText = this.buildToolDescriptions(tools);
      return content.replace("{TOOLS}", toolsText);
    }

    return content;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Markdown-–±–ª–æ–∫–∞ —Å–æ –≤—Å–µ–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
   */
  private buildToolDescriptions(tools: { name: string; description: string; spec?: ToolInputSpecField[] }[]): string {
    return tools.map(tool => {
      const spec = (tool.spec ?? [])
        .map(p =>
          `- \`${p.name}\` (${p.type}, ${p.required ? "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π" : "–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"}): ${p.description || ""}`
        )
        .join("\n");
      return `üîß **${tool.name}** ‚Äî ${tool.description}\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n${spec || "‚Äî (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)"}`;
    }).join("\n\n");
  }
}