import { Tool, ToolInputSpecField } from "../tool.interface";
import axios from "axios";

export class TextTranslateTool implements Tool {
  name = "text_translate";

  description =
    "–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è API LibreTranslate. " +
    "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö. " +
    "–Ø–∑—ã–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO-–∫–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"en\", \"ru\", \"de\").";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "text",
      type: "string",
      required: true,
      description: "–¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏."
    },
    {
      name: "to",
      type: "string",
      required: true,
      description: "–¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (ISO-–∫–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä: \"en\", \"ru\")."
    },
    {
      name: "from",
      type: "string",
      required: false,
      description: "–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."
    }
  ];

  async run(input: { text: string; to: string; from?: string }): Promise<string> {
    const { text, to, from = "auto" } = input;

    if (!text || !to) {
      return "‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"en\", \"ru\")";
    }

    try {
      const response = await axios.post(
        "https://libretranslate.de/translate",
        {
          q: text,
          source: from,
          target: to,
          format: "text"
        },
        {
          headers: { "Content-Type": "application/json" }
        }
      );

      return `üåê –ü–µ—Ä–µ–≤–æ–¥: ${response.data.translatedText}`;
    } catch (error: any) {
      return `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: ${error.message}`;
    }
  }
}