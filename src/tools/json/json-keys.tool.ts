import { Tool, ToolInputSpecField } from "../tool.interface";

export class JsonKeysTool implements Tool {
  name = "json_keys";

  description =
    "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ JSON-–æ–±—ä–µ–∫—Ç–∞. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "json",
      type: "object",
      required: true,
      description: "JSON-–æ–±—ä–µ–∫—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è."
    }
  ];

  async run(input: { json: object }): Promise<string> {
    if (!input.json || typeof input.json !== "object") {
      return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON";
    }

    const keys = Object.keys(input.json);
    return keys.length
      ? `üîë –ö–ª—é—á–∏: ${keys.join(", ")}`
      : "üì≠ –û–±—ä–µ–∫—Ç –ø—É—Å—Ç";
  }
}