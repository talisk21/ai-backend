import { Injectable, Logger } from "@nestjs/common";
import * as Services from "@services";
import * as Utils from "@utils";
import { Agent, AgentInput, AgentOutput, ChatMessage } from "./agent.interface";


@Injectable()
export class LlmToolDecisionAgent implements Agent {
  name = 'llm-tool-decision-agent';
  description =
    'LLM –∞–≥–µ–Ω—Ç, –≤—ã–±–∏—Ä–∞—é—â–∏–π –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–≥–æ, –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é.';

  private readonly logger = new Logger(LlmToolDecisionAgent.name);
  private readonly context = 'LlmToolDecisionAgent';

  constructor(
    private openRouter: Services.OpenRouterService,
    private toolProxy: Services.ToolProxyService,
    private log: Services.LogService,
  ) {}

  async run(input: AgentInput): Promise<AgentOutput> {
    const { model } = input;
    const systemPrompt = Utils.loadPrompt('llm-agent.prompt.txt');

    console.log('openRouter',this.openRouter);
    console.log('toolProxy',this.toolProxy);
    console.log('log',this.log);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const messages: ChatMessage[] = [
      { role: 'system', content: systemPrompt },
      ...input.messages.map((m) => ({
        role: m.role,
        content: m.content,
        file: m.file,
      })),
    ];

    // –õ–æ–≥ –≤–ª–æ–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (input.files?.length) {
      const attachmentsLog = `üìé –í–ª–æ–∂–µ–Ω–∏—è: ${input.files.length} —Ñ–∞–π–ª–∞(–æ–≤)`;
      this.logger.log(attachmentsLog, this.context);
      void this.log.info(attachmentsLog, this.context);
      for (const file of input.files) {
        messages.push({
          role: 'user',
          content: `üìÇ –í–ª–æ–∂–µ–Ω–∏–µ: ${file.name}`,
          file: {
            name: file.name,
            mimeType: file.mimeType,
            base64: file.base64,
          },
        });
      }
    }

    // –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenRouter
    const requestLog = `üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenRouter (model=${model}, useTools=true)`;
    this.logger.log(requestLog, this.context);
    void this.log.info(requestLog, this.context);

    const response = await this.openRouter.chat({
      model,
      messages,
      useTools: true,
    });

    // –õ–æ–≥ –ø—Ä–∏—à–µ–¥—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    const responseLog = `üîÑ –û—Ç–≤–µ—Ç –æ—Ç LLM:\n${JSON.stringify(response, null, 2)}`;
    this.logger.log(responseLog, this.context);
    void this.log.info(responseLog, this.context);

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç tool-–≤—ã–∑–æ–≤–∞
    const parsed = Utils.parseToolResponse(response);

    // –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ‚Äî –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç
    if (parsed.error !== null) {
      if (response.type === 'text' && typeof response.content === 'string') {
        return { result: response.content };
      }
      return { result: parsed.error };
    }

    // –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –≤—ã–∑–≤–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
    if (parsed.tool === null) {
      const directLog = `üí¨ –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å—Ä–µ–¥—Å—Ç–≤: ${parsed.answer}`;
      this.logger.log(directLog, this.context);
      void this.log.info(directLog, this.context);
      return { result: parsed.answer ?? '‚úÖ –û—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é.' };
    }

    // üîß –õ–æ–≥ –¥–æ proxy-–≤—ã–∑–æ–≤–∞
    const proxyCallLog = `üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "${parsed.tool}" —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ ${JSON.stringify(parsed.input)}`;
    this.logger.log(proxyCallLog, this.context);
    void this.log.info(proxyCallLog, this.context);

    // –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ proxy
    try {
      const output = await this.toolProxy.runTool(parsed.tool, parsed.input);

      // ‚úÖ –õ–æ–≥ –ø–æ—Å–ª–µ proxy-–≤—ã–∑–æ–≤–∞
      const proxyResultLog = `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ "${parsed.tool}": ${JSON.stringify(output)}`;
      this.logger.log(proxyResultLog, this.context);
      void this.log.info(proxyResultLog, this.context);

      return {
        result: output,
        usedTools: [
          {
            name: parsed.tool,
            input: parsed.input,
            output,
          },
        ],
      };
    } catch (error: any) {
      const errMsg =
        error?.message ?? '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ proxy.';
      this.logger.log(errMsg, this.context);
      void this.log.info(errMsg, this.context);
      return { result: errMsg };
    }
  }
}
