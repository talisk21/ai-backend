import { Tool, ToolInputSpecField } from "../tool.interface";

export class TextKeywordsTool implements Tool {
  name = "text_keywords";

  description =
    "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è —á–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑. " +
    "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞ (—Å—Ç–æ–ø-—Å–ª–æ–≤–∞). " +
    "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—ç–≥–æ–≤.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "text",
      type: "string",
      required: true,
      description: "–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, —Å—Ç–∞—Ç—å—è, –æ—Ç–∑—ã–≤ –∏ —Ç.–¥."
    }
  ];

  private stopWords = new Set([
    "–∏", "–≤", "–≤–æ", "–Ω–∞", "—Å", "—Å–æ", "–∑–∞", "–ø–æ–¥", "–ø–æ", "–æ", "–æ–±", "–æ—Ç",
    "–∞", "–Ω–æ", "–∏–ª–∏", "–¥–∞", "—á—Ç–æ", "—ç—Ç–æ", "–∫–∞–∫", "—É", "–∫", "–∏–∑", "–¥–ª—è",
    "–Ω–µ", "–º—ã", "–≤—ã", "–æ–Ω", "–æ–Ω–∞", "–æ–Ω–∏", "–µ–≥–æ", "–µ–µ", "–∏—Ö", "–±—ã", "–∂–µ", "–±—ã—Ç—å"
  ]);

  async run(input: { text: string }): Promise<string> {
    const words = input.text
      .toLowerCase()
      .replace(/[.,!?;:()\[\]{}"']/g, "")
      .split(/\s+/)
      .filter(word => word.length > 2 && !this.stopWords.has(word));

    const frequencyMap: Record<string, number> = {};
    for (const word of words) {
      frequencyMap[word] = (frequencyMap[word] || 0) + 1;
    }

    const topWords = Object.entries(frequencyMap)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([word, count]) => `${word} (${count})`)
      .join(", ");

    return topWords
      ? `üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${topWords}`
      : "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.";
  }
}