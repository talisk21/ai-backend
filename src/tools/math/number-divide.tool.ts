import { Tool, ToolInputSpecField } from "../tool.interface";

export class NumberDivideTool implements Tool {
  name = "number_divide";

  description =
    "–î–µ–ª–∏—Ç –æ–¥–Ω–æ —á–∏—Å–ª–æ –Ω–∞ –¥—Ä—É–≥–æ–µ (a / b). " +
    "–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä `returnRemainder` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ true. " +
    "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∞–Ω–∞–ª–∏–∑–∞ –¥–µ–ª–∏–º–æ—Å—Ç–∏ –∏ —Ä–∞—Å—á—ë—Ç–∞ —á–∞—Å—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "a",
      type: "number",
      required: true,
      description: "–î–µ–ª–∏–º–æ–µ (—á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏–º)"
    },
    {
      name: "b",
      type: "number",
      required: true,
      description: "–î–µ–ª–∏—Ç–µ–ª—å (—á–∏—Å–ª–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏–º)"
    },
    {
      name: "returnRemainder",
      type: "boolean",
      required: false,
      description: "–ï—Å–ª–∏ true ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è"
    }
  ];

  async run(input: { a: number; b: number; returnRemainder?: boolean }): Promise<string> {
    const { a, b, returnRemainder } = input;

    if (typeof a !== "number" || typeof b !== "number") {
      return "‚ùå –ó–Ω–∞—á–µ–Ω–∏—è \"a\" –∏ \"b\" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏";
    }

    if (b === 0) {
      return "‚ùå –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ";
    }

    const result = a / b;
    const remainder = a % b;

    if (returnRemainder) {
      return `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}, –û—Å—Ç–∞—Ç–æ–∫: ${remainder}`;
    }

    return result.toString();
  }
}