import { Agent, AgentInput, AgentOutput, ChatMessage } from "./agent.interface";
import { ToolExecutorService } from "../tools/tool-executor.service";
import { OpenRouterService } from "./openrouter.service";
import { PromptLoader } from "./prompt-loader";
import { ToolCallService } from "../tools/tool-call.service";
import { LogService } from "../log/log.service";
import { ToolResponseParserService } from "../tools/tool-response-parser.service";
import { Logger } from "@nestjs/common";

export class LlmToolDecisionAgent implements Agent {
  name = "llm-tool-decision-agent";
  description =
    "LLM –∞–≥–µ–Ω—Ç, –≤—ã–±–∏—Ä–∞—é—â–∏–π –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–≥–æ, –ª–∏–±–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é.";

  private readonly logger = new Logger(LlmToolDecisionAgent.name);

  constructor(
    private openRouter: OpenRouterService,
    private tools: ToolExecutorService,
    private log: LogService,
    private promptLoader: PromptLoader,
    private toolCallService: ToolCallService,
    private toolResponseParser: ToolResponseParserService
  ) {
  }

  async run(input: AgentInput): Promise<AgentOutput> {
    const { model } = input;
    const systemPrompt = this.promptLoader.loadAgentPrompt(
      "llm-tool-decision-agent.prompt.txt"
    );

    // üß† –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const messages: ChatMessage[] = [
      { role: "system", content: systemPrompt },
      ...input.messages.map((m) => ({
        role: m.role,
        content: m.content,
        file: m.file // –µ—Å–ª–∏ —É–∂–µ –±—ã–ª file –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
      }))
    ];

    if (input.files?.length) {
      this.logger.log(`üìé –í–ª–æ–∂–µ–Ω–∏—è: ${input.files.length} —Ñ–∞–π–ª–∞(–æ–≤)`);

      for (const file of input.files) {
        messages.push({
          role: "user",
          content: `üìÇ –í–ª–æ–∂–µ–Ω–∏–µ: ${file.name}`,
          file: {
            name: file.name,
            mimeType: file.mimeType,
            base64: file.base64
          }
        });
      }
    }

    const response = await this.openRouter.chat({
      model,
      messages,
      useTools: true
    });

    this.logger.log(
      `üîÑ –û—Ç–≤–µ—Ç –æ—Ç LLM:\n${JSON.stringify(response, null, 2)}`,
      "LLmToolDecisionAgent"
    );
    await this.log.info(
      `üîÑ –û—Ç–≤–µ—Ç –æ—Ç LLM:\n${JSON.stringify(response, null, 2)}`,
      "LLmToolDecisionAgent"
    );

    const parsed = this.toolResponseParser.parse(response);

    // üî¥ –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)
    if (parsed.error !== null) {
      if (response?.type === "text" && typeof response.content === "string") {
        return { result: response.content };
      }
      return { result: parsed.error };
    }

    // ‚úÖ –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –≤—ã–∑–≤–∞–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
    if (parsed.tool === null) {
      return {
        result:
          parsed.answer ??
          "‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –æ—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é."
      };
    }

    // ‚öôÔ∏è –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const output = await this.toolCallService.executeTool(
      parsed.tool,
      parsed.input
    );
    if (typeof output !== "string") {
      return {
        result:
          output?.error ?? "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."
      };
    }

    return {
      result: output,
      usedTools: [
        {
          name: parsed.tool,
          input: parsed.input,
          output
        }
      ]
    };
  }
}
