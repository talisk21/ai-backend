import { Tool } from '../tool.interface';

export class ClassifyTextTool implements Tool {
  name = 'classify_text';
  description = '–ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –∏ –º–µ—Ç–∫–∞–º';

  async run(input: { text: string; labels: Record<string, string[]> }): Promise<string> {
    const { text, labels } = input;

    if (!text || typeof text !== 'string' || !labels || typeof labels !== 'object') {
      return '‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏';
    }

    const lowerText = text.toLowerCase();
    const matched: string[] = [];

    for (const label of Object.keys(labels)) {
      const keywords = labels[label];
      if (keywords.some(word => lowerText.includes(word.toLowerCase()))) {
        matched.push(label);
      }
    }

    return matched.length > 0
      ? `üè∑Ô∏è –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${matched.join(', ')}`
      : 'üîç –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
  }
}