import {
  Body,
  Controller,
  Get,
  NotFoundException,
  Param,
  Post,
} from '@nestjs/common';
import * as Services from '@services';

@Controller('tools')
export class ToolsController {
  constructor(private readonly toolProxy: Services.ToolProxyService) {}

  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
  @Get()
  async listTools() {
    return await this.toolProxy.getAllTools();
  }

  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
  @Get(':name')
  async getToolByName(@Param('name') name: string) {
    try {
      return await this.toolProxy.getTool(name);
    } catch (error: any) {
      throw new NotFoundException(error.message);
    }
  }

  // üîπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
  @Post(':name/run')
  async runTool(@Param('name') name: string, @Body() body: { args?: any }) {
    const args = body.args || {};

    // 1Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º —Ç—É–ª –∏ –µ–≥–æ source
    const tool = await this.toolProxy.getTool(name);
    if (!tool || !tool.source) {
      throw new NotFoundException(`–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "${name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // 2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—É–ª —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π source
    return await this.toolProxy.runTool(name, args, tool.source);
  }
}
