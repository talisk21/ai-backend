import { Tool, ToolInputSpecField } from "../tool.interface";
import axios from "axios";
import * as cheerio from "cheerio";

export class ExtractTableTool implements Tool {
  name = "extract_table";

  description =
      "–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –≤–∏–¥–µ JSON-–º–∞—Å—Å–∏–≤–∞. " +
      "–ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML-—Ç–∞–±–ª–∏—Ü, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü. " +
      "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 10 —Å—Ç—Ä–æ–∫.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "url",
      type: "string",
      required: true,
      description: "URL-–∞–¥—Ä–µ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏ –∏–∑–≤–ª–µ—á—å –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É. –ù–∞–ø—Ä–∏–º–µ—Ä: \"https://example.com/table\"."
    }
  ];

  async run(input: { url: string }): Promise<string> {
    const { url } = input;

    if (!url || typeof url !== "string") {
      return "‚ùå –£–∫–∞–∂–∏ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã";
    }

    try {
      const response = await axios.get(url, {
        headers: {
          "User-Agent": "Mozilla/5.0 (compatible; AI-Agent/1.0)"
        },
        timeout: 10000
      });

      const $ = cheerio.load(response.data);
      const table = $("table").first();

      if (!table.length) return "üì≠ –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";

      const headers: string[] = [];
      const rows: string[][] = [];

      table.find("tr").each((i, row) => {
        const cells = $(row).find("th, td");
        const rowData: string[] = [];

        cells.each((_, cell) => {
          rowData.push($(cell).text().trim());
        });

        if (i === 0) {
          headers.push(...rowData);
        } else {
          rows.push(rowData);
        }
      });

      const result = rows.slice(0, 10).map((row) => {
        const obj: Record<string, string> = {};
        headers.forEach((h, i) => {
          obj[h || `col_${i + 1}`] = row[i] || "";
        });
        return obj;
      });

      return JSON.stringify(result, null, 2);
    } catch (error: any) {
      return `‚ùå –û—à–∏–±–∫–∞: ${error.message}`;
    }
  }
}