import { Tool, ToolInputSpecField } from "../tool.interface";

export class TextSummaryAdvancedTool implements Tool {
  name = "text_summary_advanced";

  description =
    "–°–æ–∑–¥–∞—ë—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–µ–ª—è—è –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è " +
    "–Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤. –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Å—Ç–∞—Ç–µ–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π. " +
    "–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–µ–∑—é–º–µ.";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "text",
      type: "string",
      required: true,
      description: "–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–∂–∞—Ç–æ–µ —Ä–µ–∑—é–º–µ."
    },
    {
      name: "maxSentences",
      type: "number",
      required: false,
      description: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–µ–∑—é–º–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî 3)."
    }
  ];

  async run(input: { text: string; maxSentences?: number }): Promise<string> {
    const { text, maxSentences = 3 } = input;

    if (!text || typeof text !== "string") {
      return "‚ùå –£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è";
    }

    const sentences = text
      .split(/[.?!]\s+/)
      .map(s => s.trim())
      .filter(Boolean);

    if (sentences.length <= maxSentences) {
      return `‚ÑπÔ∏è –í —Ç–µ–∫—Å—Ç–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞—é –∫–∞–∫ –µ—Å—Ç—å:\n\n${text}`;
    }

    const scores = new Map<string, number>();
    const wordFreq: Record<string, number> = {};

    for (const sentence of sentences) {
      const words = sentence.toLowerCase().split(/\W+/).filter(w => w.length > 3);
      for (const word of words) {
        wordFreq[word] = (wordFreq[word] || 0) + 1;
      }
    }

    for (const sentence of sentences) {
      let score = 0;
      const words = sentence.toLowerCase().split(/\W+/);
      for (const word of words) {
        if (wordFreq[word]) score += wordFreq[word];
      }
      scores.set(sentence, score);
    }

    const sorted = [...scores.entries()]
      .sort((a, b) => b[1] - a[1])
      .slice(0, maxSentences)
      .map(([sentence]) => sentence);

    return `üìÑ –°–≤–æ–¥–∫–∞:\n\n${sorted.join(". ")}.`;
  }
}