import { Tool, ToolInputSpecField } from "../tool.interface";

export class MathTool implements Tool {
  name = "math";
  description = "–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏, –≤–∫–ª—é—á–∞—è —Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ.\n" +
    "–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n" +
    "–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: \"2 + 3 * (5 - 1)\"), –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É, —Ä–∞–∑–Ω–∏—Ü—É, —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º—É–ª—ã –∏ —Ç.–¥.\"";

  inputSpec: ToolInputSpecField[] = [
    {
      name: "expression",
      type: "string",
      required: true,
      description: "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: —á–∏—Å–ª–∞, +, -, *, /, —Å–∫–æ–±–∫–∏."
    }
  ];

  async run(input: { expression: string }): Promise<string> {
    const expr = input.expression;

    console.log("expr ", expr);

    if (!expr || typeof expr !== "string") {
      return "‚ùå –£–∫–∞–∂–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (expression) –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏";
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if (!/^[\d\s\+\-\*\/\(\)\.]+$/.test(expr)) {
      return "‚ùå –í—ã—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã";
    }

    try {
      // eslint-disable-next-line no-eval
      const result = eval(expr);
      return `üìê –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}`;
    } catch (e) {
      return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ";
    }
  }
}