generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Execution {
  id          String     @id @default(uuid())
  userId      String     @default("UI")
  status      String
  startedAt   DateTime   @default(now())
  finishedAt  DateTime?
  steps       Step[]
  files       File[]

  templateId  String?                                // üÜï ID —à–∞–±–ª–æ–Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∞
  template    RouteTemplate? @relation(fields: [templateId], references: [id])
  routeJson  Json?
}

model Step {
  id            String     @id @default(uuid())
  executionId   String
  status        String?    // pending | in_progress | waiting_user_loop | done | error
  type          String     // "agent", "api", "tool"
  input         Json
  output        Json?
  source        String?
  userId        String?
  error         String?
  createdAt     DateTime   @default(now())
  files         File[]
  execution     Execution  @relation(fields: [executionId], references: [id])

  parentStepId  String?
  parentStep    Step?      @relation("StepToStep", fields: [parentStepId], references: [id])
  childSteps    Step[]     @relation("StepToStep")
}

model Log {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  level     String
  message   String
  context   String?
  metadata  Json?
}

model RequestLog {
  id        String   @id @default(uuid())
  method    String
  url       String
  status    Int
  duration  Int
  timestamp DateTime @default(now())
  body      Json?
  query     Json?
  headers   Json?
}

model MailAccount {
  id        String   @id @default(cuid())
  name      String
  email     String
  smtpHost  String
  smtpPort  Int
  smtpUser  String
  smtpPass  String
  imapHost  String
  imapPort  Int
  imapUser  String
  imapPass  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id              String     @id @default(uuid())
  name            String
  url             String
  size            Int
  mimeType        String
  executionId     String?
  stepId          String?
  type            String? // "input" | "output" | "upload" –∏ —Ç.–ø.
  isConverted     Boolean    @default(false)
  createdAt       DateTime   @default(now())
  convertedFile   File?      @relation("ConvertedFile", fields: [convertedFileId], references: [id])
  convertedFileId String?    @unique
  execution       Execution? @relation(fields: [executionId], references: [id])
  step            Step?      @relation(fields: [stepId], references: [id])
  originalFile    File?      @relation("ConvertedFile")
}

model RouteTemplate {
  id         String        @id @default(uuid())
  name       String
  type       String?       // –ù–∞–ø—Ä–∏–º–µ—Ä: "linear", "conditional", "manual"
  rawContent Json?         // —Å—ã—Ä–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ UI
  content    Json?         // –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π JSON-–º–∞—Ä—à—Ä—É—Ç
  metadata   Json?         // –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  userId     String?
  isPublic   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  executions Execution[]    // üîÅ –°–≤—è–∑—å —Å –∑–∞–ø—É—Å–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞
}