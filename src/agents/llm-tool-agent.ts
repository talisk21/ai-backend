import { Injectable, Logger } from "@nestjs/common";
import * as Services from "@services";
import * as Utils from "@utils";
import { Agent, AgentInput, AgentOutput, ChatMessage } from "./agent.interface";

@Injectable()
export class LlmToolAgent implements Agent {
  name = 'llm-tool-agent';
  description =
    '–ê–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç—Ä–æ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å–∞–º.';

  private readonly context = LlmToolAgent.name;
  private readonly logger = new Logger(this.context);

  constructor(
    private openRouter: Services.OpenRouterService,
    private toolProxy: Services.ToolProxyService,
    private log: Services.LogService,
  ) {}

  async run(input: AgentInput): Promise<AgentOutput> {
    // 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    const systemPrompt = Utils.loadPrompt('llm-agent.prompt.txt');

    // 2Ô∏è‚É£ –°–±–æ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const messages: ChatMessage[] = [
      { role: 'system', content: systemPrompt },
      ...input.messages.map((m) => ({
        role: m.role,
        content: m.content,
        file: m.file,
      })),
    ];

    // 3Ô∏è‚É£ –õ–æ–≥ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (input.files?.length) {
      const filesLog = `üìé –ü–µ—Ä–µ–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${input.files.length}`;
      this.logger.log(filesLog, this.context);
      void this.log.info(filesLog, this.context);

      for (const file of input.files) {
        messages.push({
          role: 'user',
          content: `–§–∞–π–ª: ${file.name}`,
          file: {
            name: file.name,
            mimeType: file.mimeType,
            base64: file.base64,
          },
        });
      }
    }

    // 4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    const requestLog = `üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenRouter (model=${input.model}, useTools=true)`;
    this.logger.log(requestLog, this.context);
    void this.log.info(requestLog, this.context);

    const response = await this.openRouter.chat({
      model: input.model,
      messages,
      useTools: true,
    });

    // 5Ô∏è‚É£ –ü—Ä–∏—à—ë–ª –æ—Ç–≤–µ—Ç –æ—Ç LLM
    const responseLog = `üîÑ –û—Ç–≤–µ—Ç –æ—Ç LLM:\n${JSON.stringify(response, null, 2)}`;
    this.logger.log(responseLog, this.context);
    void this.log.info(responseLog, this.context);

    // 6Ô∏è‚É£ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    const parsed = Utils.parseToolResponse(response);

    if (parsed.error !== null) {
      const errParse = `‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ tool-–≤—ã–∑–æ–≤–∞: ${parsed.error}`;
      this.logger.log(errParse, this.context);
      void this.log.info(errParse, this.context);
      return { result: errParse };
    }

    if (parsed.tool === null) {
      const noTool =
        '‚ùå –≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –¢–æ–ª—å–∫–æ tool-–≤—ã–∑–æ–≤—ã.';
      this.logger.log(noTool, this.context);
      void this.log.info(noTool, this.context);
      return { result: noTool };
    }

    // 7Ô∏è‚É£ –õ–æ–≥–∏ –¥–æ proxy-–≤—ã–∑–æ–≤–∞
    const proxyCallLog = `üîß –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ proxy: ${parsed.tool} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ ${JSON.stringify(parsed.input)}`;
    this.logger.log(proxyCallLog, this.context);
    void this.log.info(proxyCallLog, this.context);

    // 8Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ proxy-–≤—ã–∑–æ–≤–∞ –≤ try/catch
    try {
      const output = await this.toolProxy.runTool(parsed.tool, parsed.input);

      const proxyResultLog = `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç proxy –¥–ª—è ${parsed.tool}: ${JSON.stringify(output)}`;
      this.logger.log(proxyResultLog, this.context);
      void this.log.info(proxyResultLog, this.context);

      return {
        result: output,
        usedTools: [
          {
            name: parsed.tool,
            input: parsed.input,
            output,
          },
        ],
      };
    } catch (error: any) {
      const errRun =
        error?.message ?? '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ proxy.';
      this.logger.log(errRun, this.context);
      void this.log.info(errRun, this.context);
      return { result: errRun };
    }
  }
}
